#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è YOLO –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ -> –æ—Ç–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç (clean/dirty)
"""

import os
import time
import numpy as np
import cv2
from ultralytics import YOLO
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# –ú–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
class PredictionResponse(BaseModel):
    label: str          # "clean" –∏–ª–∏ "dirty"
    confidence: float   # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
    processing_time: float  # –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º—Å

class HealthResponse(BaseModel):
    status: str
    model_loaded: bool

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
model = None

def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é YOLO –º–æ–¥–µ–ª—å"""
    global model
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏
    model_paths = [
        "trained_models/dirty_car_yolo.pt",
        "runs/classify/dirty_car_simple/weights/best.pt",
        "artifacts/best.pt"
    ]
    
    for path in model_paths:
        if os.path.exists(path):
            print(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {path}")
            model = YOLO(path)
            return True
    
    print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    return False

def predict_image(image_bytes):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    start_time = time.time()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    nparr = np.frombuffer(image_bytes, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    
    if image is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ YOLO
    results = model(image, verbose=False)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    probs = results[0].probs
    class_id = probs.top1  # ID –∫–ª–∞—Å—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    confidence = float(probs.top1conf)  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: 0=clean, 1=dirty)
    label = "clean" if class_id == 0 else "dirty"
    
    processing_time = (time.time() - start_time) * 1000
    
    return {
        "label": label,
        "confidence": confidence,
        "processing_time": processing_time
    }

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="DirtyCar YOLO API",
    description="–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∏—Å—Ç—ã—Ö/–≥—Ä—è–∑–Ω—ã—Ö –º–∞—à–∏–Ω",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    if not load_model():
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å!")

@app.get("/healthz", response_model=HealthResponse)
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return HealthResponse(
        status="ok" if model is not None else "error",
        model_loaded=model is not None
    )

@app.post("/predict", response_model=PredictionResponse)
async def predict(file: UploadFile = File(...)):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    –ó–∞–≥—Ä—É–∂–∞–µ—à—å —Ñ–æ—Ç–æ -> –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        result = predict_image(contents)
        
        return PredictionResponse(**result)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "üöó DirtyCar YOLO API",
        "endpoints": {
            "predict": "/predict (POST —Å —Ñ–∞–π–ª–æ–º)",
            "health": "/healthz",
            "docs": "/docs"
        },
        "usage": "curl -X POST -F 'file=@car.jpg' http://localhost:7439/predict"
    }

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv('API_PORT', '7439'))
    
    uvicorn.run(
        "simple_serve:app",
        host="0.0.0.0",
        port=port,
        reload=False
    )
