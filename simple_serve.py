#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è YOLO –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ -> –æ—Ç–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç (clean/dirty)
"""

import os
import time
import numpy as np
import cv2
from ultralytics import YOLO
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# –ú–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
class PredictionResponse(BaseModel):
    label: str          # "clean" –∏–ª–∏ "dirty"
    confidence: float   # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
    processing_time: float  # –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º—Å

class DamageResponse(BaseModel):
    damage_type: str    # —Ç–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
    confidence: float   # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
    processing_time: float  # –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º—Å
    all_detections: list  # –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è

class HealthResponse(BaseModel):
    status: str
    model_loaded: bool
    damage_model_loaded: bool

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
model = None  # –º–æ–¥–µ–ª—å clean/dirty
damage_model = None  # –º–æ–¥–µ–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π

def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é YOLO –º–æ–¥–µ–ª—å –¥–ª—è clean/dirty"""
    global model
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    model_paths = [
        "runs/classify/dirty_car_simple2/weights/best.pt",  # –Ω–æ–≤–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        "runs/classify/dirty_car_simple/weights/best.pt",
        "trained_models/dirty_car_yolo.pt",
        "artifacts/best.pt"
    ]
    
    for path in model_paths:
        if os.path.exists(path):
            print(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º clean/dirty –º–æ–¥–µ–ª—å: {path}")
            model = YOLO(path)
            return True
    
    print("‚ùå Clean/dirty –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    return False

def load_damage_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"""
    global damage_model
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    damage_paths = [
        "trained_models/best.pt",  # —Ç–≤–æ—è –º–æ–¥–µ–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        "damage_model/best.pt",
        "models/damage_best.pt"
    ]
    
    for path in damage_paths:
        if os.path.exists(path):
            print(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º damage –º–æ–¥–µ–ª—å: {path}")
            damage_model = YOLO(path)
            return True
    
    print("‚ùå Damage –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    return False

def predict_image(image_bytes):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (clean/dirty)"""
    start_time = time.time()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    nparr = np.frombuffer(image_bytes, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    
    if image is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ YOLO
    if model is None:
        raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    results = model(image, verbose=False)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    probs = results[0].probs
    class_id = probs.top1  # ID –∫–ª–∞—Å—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    confidence = float(probs.top1conf)  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: 0=clean, 1=dirty)
    label = "clean" if class_id == 0 else "dirty"
    
    processing_time = (time.time() - start_time) * 1000
    
    return {
        "label": label,
        "confidence": confidence,
        "processing_time": processing_time
    }

def predict_damage(image_bytes):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    start_time = time.time()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    nparr = np.frombuffer(image_bytes, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    
    if image is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ YOLO
    if damage_model is None:
        raise ValueError("–ú–æ–¥–µ–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    results = damage_model(image, verbose=False)
    
    # –ö–ª–∞—Å—Å—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    damage_classes = {
        0: 'RunningBoard-Dent',  # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –ø–æ–¥–Ω–æ–∂–∫–µ
        1: 'bonnet-dent',        # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –∫–∞–ø–æ—Ç–µ
        2: 'dent',               # –æ–±—â–∞—è –≤–º—è—Ç–∏–Ω–∞
        3: 'doorouter-dent',     # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –¥–≤–µ—Ä–∏
        4: 'fender-dent',        # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –∫—Ä—ã–ª–µ
        5: 'front-bumper-dent',  # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –±–∞–º–ø–µ—Ä–µ
        6: 'quaterpanel-dent',   # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –∑–∞–¥–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        7: 'rear-bumper-dent',   # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –∑–∞–¥–Ω–µ–º –±–∞–º–ø–µ—Ä–µ
        8: 'roof-dent'           # –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –∫—Ä—ã—à–µ
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
    detections = []
    if hasattr(results[0], 'boxes') and results[0].boxes is not None:
        boxes = results[0].boxes
        for i in range(len(boxes.cls)):
            class_id = int(boxes.cls[i])
            confidence = float(boxes.conf[i])
            damage_type = damage_classes.get(class_id, f"unknown_{class_id}")
            
            detections.append({
                "damage_type": damage_type,
                "confidence": confidence,
                "bbox": boxes.xyxy[i].tolist() if hasattr(boxes, 'xyxy') else None
            })
    
    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ
    if detections:
        best_detection = max(detections, key=lambda x: x['confidence'])
        damage_type = best_detection['damage_type']
        confidence = best_detection['confidence']
    else:
        damage_type = "no_damage"
        confidence = 0.0
    
    processing_time = (time.time() - start_time) * 1000
    
    return {
        "damage_type": damage_type,
        "confidence": confidence,
        "processing_time": processing_time,
        "all_detections": detections
    }

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="DirtyCar YOLO API",
    description="–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–∏—Å—Ç—ã—Ö/–≥—Ä—è–∑–Ω—ã—Ö –º–∞—à–∏–Ω",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    clean_dirty_loaded = load_model()
    damage_loaded = load_damage_model()
    
    if not clean_dirty_loaded:
        print("‚ö†Ô∏è Clean/dirty –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    if not damage_loaded:
        print("‚ö†Ô∏è Damage –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    if not clean_dirty_loaded and not damage_loaded:
        raise Exception("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

@app.get("/healthz", response_model=HealthResponse)
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return HealthResponse(
        status="ok" if (model is not None or damage_model is not None) else "error",
        model_loaded=model is not None,
        damage_model_loaded=damage_model is not None
    )

@app.post("/predict", response_model=PredictionResponse)
async def predict(file: UploadFile = File(...)):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    –ó–∞–≥—Ä—É–∂–∞–µ—à—å —Ñ–æ—Ç–æ -> –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not file.content_type or not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        result = predict_image(contents)
        
        return PredictionResponse(**result)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")

@app.post("/predict/damage", response_model=DamageResponse)
async def predict_car_damage(file: UploadFile = File(...)):
    """
    –≠–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    –ó–∞–≥—Ä—É–∂–∞–µ—à—å —Ñ–æ—Ç–æ -> –ø–æ–ª—É—á–∞–µ—à—å —Ç–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not file.content_type or not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        result = predict_damage(contents)
        
        return DamageResponse(**result)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {str(e)}")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "üöó DirtyCar YOLO API",
        "endpoints": {
            "predict": "/predict (POST —Å —Ñ–∞–π–ª–æ–º) - clean/dirty",
            "predict_damage": "/predict/damage (POST —Å —Ñ–∞–π–ª–æ–º) - –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
            "health": "/healthz",
            "docs": "/docs"
        },
        "usage": {
            "clean_dirty": "curl -X POST -F 'file=@car.jpg' http://localhost:7439/predict",
            "damage": "curl -X POST -F 'file=@car.jpg' http://localhost:7439/predict/damage"
        }
    }

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv('API_PORT', '7439'))
    
    uvicorn.run(
        "simple_serve:app",
        host="0.0.0.0",
        port=port,
        reload=False
    )
